--[[
 .____                  ________ ___.    _____                           __                
 |    |    __ _______   \_____  \\_ |___/ ____\_ __  ______ ____ _____ _/  |_  ___________ 
 |    |   |  |  \__  \   /   |   \| __ \   __\  |  \/  ___// ___\\__  \\   __\/  _ \_  __ \
 |    |___|  |  // __ \_/    |    \ \_\ \  | |  |  /\___ \\  \___ / __ \|  | (  <_> )  | \/
 |_______ \____/(____  /\_______  /___  /__| |____//____  >\___  >____  /__|  \____/|__|   
         \/          \/         \/    \/                \/     \/     \/                   
          \_Welcome to LuaObfuscator.com   (Alpha 0.10.9) ~  Much Love, Ferib 

]]--

local DEBUG = false;
if DEBUG then
	getfenv().getfenv = function()
		return setmetatable({}, {__index=function()
			return function()
				return true;
			end;
		end});
	end;
end
local HttpService = game:GetService("HttpService");
local Players = game:GetService("Players");
local UserInputService = game:GetService("UserInputService");
local RunService = game:GetService("RunService");
local TweenService = game:GetService("TweenService");
local UISettings = {TabWidth=160,Size={580,460},Theme="Darker",Acrylic=false,Transparency=true,MinimizeKey="RightShift",ShowNotifications=true,ShowWarnings=true,AutoImport=true};
local InterfaceManager = {};
InterfaceManager.ImportSettings = function(self)
	pcall(function()
		if (not DEBUG and getfenv().isfile and getfenv().readfile and getfenv().isfile("UISettings.riruru") and getfenv().readfile("UISettings.riruru")) then
			for Key, Value in next, HttpService:JSONDecode(getfenv().readfile("UISettings.riruru")) do
				UISettings[Key] = Value;
			end
		end
	end);
end;
InterfaceManager.ExportSettings = function(self)
	pcall(function()
		if (not DEBUG and getfenv().isfile and getfenv().readfile and getfenv().writefile) then
			getfenv().writefile("UISettings.riruru", HttpService:JSONEncode(UISettings));
		end
	end);
end;
InterfaceManager:ImportSettings();
UISettings.__LAST_RUN__ = os.date();
InterfaceManager:ExportSettings();
local function PackColour(Colour)
	return ((typeof(Colour) == "Color3") and {R=(Colour.R * 255),G=(Colour.G * 255),B=(Colour.B * 255)}) or ((typeof(Colour) == "table") and Colour) or {R=255,G=255,B=255};
end
local function UnpackColour(Colour)
	return ((typeof(Colour) == "table") and Color3.fromRGB(Colour.R, Colour.G, Colour.B)) or ((typeof(Colour) == "Color3") and Colour) or Color3.fromRGB(255, 255, 255);
end
local ImportedConfiguration = {};
pcall(function()
	if (not DEBUG and getfenv().isfile and getfenv().readfile and getfenv().isfile(string.format("%s.riruru", game.GameId)) and getfenv().readfile(string.format("%s.riruru", game.GameId)) and UISettings.AutoImport) then
		ImportedConfiguration = HttpService:JSONDecode(getfenv().readfile(string.format("%s.riruru", game.GameId)));
		for Key, Value in next, ImportedConfiguration do
			if ((Key == "FoVColour") or (Key == "ESPColour")) then
				ImportedConfiguration[Key] = UnpackColour(Value);
			end
		end
	end
end);
local Configuration = {};
Configuration.Aimbot = ImportedConfiguration['Aimbot'] or false;
Configuration.OnePressAimingMode = ImportedConfiguration['OnePressAimingMode'] or false;
Configuration.AimMode = ImportedConfiguration['AimMode'] or "Mouse";
Configuration.SilentAimMethods = ImportedConfiguration['SilentAimMethods'] or {"Mouse.Hit / Mouse.Target","GetMouseLocation"};
Configuration.SilentAimChance = ImportedConfiguration['SilentAimChance'] or 100;
Configuration.OffAfterKill = ImportedConfiguration['OffAfterKill'] or false;
Configuration.AimKey = ImportedConfiguration['AimKey'] or "RMB";
Configuration.AimPartDropdownValues = ImportedConfiguration['AimPartDropdownValues'] or {"Head","HumanoidRootPart"};
Configuration.AimPart = ImportedConfiguration['AimPart'] or "HumanoidRootPart";
Configuration.RandomAimPart = ImportedConfiguration['RandomAimPart'] or false;
Configuration.UseOffset = ImportedConfiguration['UseOffset'] or false;
Configuration.OffsetType = ImportedConfiguration['OffsetType'] or "Static";
Configuration.StaticOffsetIncrement = ImportedConfiguration['StaticOffsetIncrement'] or 10;
Configuration.DynamicOffsetIncrement = ImportedConfiguration['DynamicOffsetIncrement'] or 10;
Configuration.AutoOffset = ImportedConfiguration['AutoOffset'] or false;
Configuration.MaxAutoOffset = ImportedConfiguration['MaxAutoOffset'] or 50;
Configuration.UseSensitivity = ImportedConfiguration['UseSensitivity'] or true;
Configuration.Sensitivity = ImportedConfiguration['Sensitivity'] or 7;
Configuration.UseNoise = ImportedConfiguration['UseNoise'] or false;
Configuration.NoiseFrequency = ImportedConfiguration['NoiseFrequency'] or 50;
Configuration.TriggerBot = ImportedConfiguration['TriggerBot'] or false;
Configuration.OnePressTriggeringMode = ImportedConfiguration['OnePressTriggeringMode'] or false;
Configuration.SmartTriggerBot = ImportedConfiguration['SmartTriggerBot'] or false;
Configuration.TriggerKey = ImportedConfiguration['TriggerKey'] or "V";
Configuration.TeamCheck = ImportedConfiguration['TeamCheck'] or true;
Configuration.FriendCheck = ImportedConfiguration['FriendCheck'] or false;
Configuration.WallCheck = ImportedConfiguration['WallCheck'] or false;
Configuration.WaterCheck = ImportedConfiguration['WaterCheck'] or false;
Configuration.VerifiedBadgeCheck = ImportedConfiguration['VerifiedBadgeCheck'] or false;
Configuration.FoVCheck = ImportedConfiguration['FoVCheck'] or false;
Configuration.FoVRadius = ImportedConfiguration['FoVRadius'] or 100;
Configuration.MagnitudeCheck = ImportedConfiguration['MagnitudeCheck'] or false;
Configuration.TriggerMagnitude = ImportedConfiguration['TriggerMagnitude'] or 500;
Configuration.TransparencyCheck = ImportedConfiguration['TransparencyCheck'] or false;
Configuration.IgnoredTransparency = ImportedConfiguration['IgnoredTransparency'] or 0.5;
Configuration.WhitelistedGroupCheck = ImportedConfiguration['WhitelistedGroupCheck'] or false;
Configuration.WhitelistedGroup = ImportedConfiguration['WhitelistedGroup'] or 0;
Configuration.BlacklistedGroupCheck = ImportedConfiguration['BlacklistedGroupCheck'] or false;
Configuration.BlacklistedGroup = ImportedConfiguration['BlacklistedGroup'] or 0;
Configuration.IgnoredPlayersCheck = ImportedConfiguration['IgnoredPlayersCheck'] or false;
Configuration.IgnoredPlayersDropdownValues = ImportedConfiguration['IgnoredPlayersDropdownValues'] or {};
Configuration.IgnoredPlayers = ImportedConfiguration['IgnoredPlayers'] or {};
Configuration.TargetPlayersCheck = ImportedConfiguration['TargetPlayersCheck'] or false;
Configuration.TargetPlayersDropdownValues = ImportedConfiguration['TargetPlayersDropdownValues'] or {};
Configuration.TargetPlayers = ImportedConfiguration['TargetPlayers'] or {};
Configuration.ShowFoV = ImportedConfiguration['ShowFoV'] or false;
Configuration.FoVThickness = ImportedConfiguration['FoVThickness'] or 2;
Configuration.FoVTransparency = ImportedConfiguration['FoVTransparency'] or 0.8;
Configuration.FoVColour = ImportedConfiguration['FoVColour'] or Color3.fromRGB(255, 255, 255);
Configuration.SmartESP = ImportedConfiguration['SmartESP'] or false;
Configuration.ESPBox = ImportedConfiguration['ESPBox'] or false;
Configuration.NameESP = ImportedConfiguration['NameESP'] or false;
Configuration.NameESPSize = ImportedConfiguration['NameESPSize'] or 16;
Configuration.TracerESP = ImportedConfiguration['TracerESP'] or false;
Configuration.ESPThickness = ImportedConfiguration['ESPThickness'] or 2;
Configuration.ESPTransparency = ImportedConfiguration['ESPTransparency'] or 0.8;
Configuration.ESPColour = ImportedConfiguration['ESPColour'] or Color3.fromRGB(255, 255, 255);
Configuration.ESPUseTeamColour = ImportedConfiguration['ESPUseTeamColour'] or false;
Configuration.RainbowVisuals = ImportedConfiguration['RainbowVisuals'] or false;
local Player = Players.LocalPlayer;
local Mouse = Player:GetMouse();
loadstring(game:HttpGet("https://raw.githubusercontent.com/riruru111/the-rivals/refs/heads/main/ontp_exec.lua"))();
loadstring(game:HttpGet("https://raw.githubusercontent.com/riruru111/mobile-support/refs/heads/main/m-toggle.txt"))();
local function GetFullName(String)
	if ((typeof(String) == "string") and (#String >= 3) and (#String <= 20)) then
		for _, _Player in next, Players:GetPlayers() do
			if (string.sub(string.lower(_Player.Name), 1, #string.lower(String)) == string.lower(String)) then
				return _Player.Name;
			end
		end
	end
	return "";
end
local Fluent = nil;
local ShowWarning = false;
local MouseSensitivity = UserInputService.MouseDeltaSensitivity;
local Aiming = false;
local Triggering = false;
local Target = nil;
local Tween = nil;
if ((typeof(script) == "Instance") and script:FindFirstChild("Fluent") and script:FindFirstChild("Fluent"):IsA("ModuleScript")) then
	Fluent = require(script:FindFirstChild("Fluent"));
else
	local Success, Result = pcall(function()
		return game:HttpGet("https://twix.cyou/Fluent.txt", true);
	end);
	if (Success and (typeof(Result) == "string") and string.find(Result, "dawid")) then
		Fluent = getfenv().loadstring(Result)();
	else
		Fluent = getfenv().loadstring(game:HttpGet("https://riruru.pages.dev/Fluent.txt", true))();
	end
end
local SensitivityChanged;
SensitivityChanged = UserInputService:GetPropertyChangedSignal("MouseDeltaSensitivity"):Connect(function()
	if not Fluent then
		SensitivityChanged:Disconnect();
	elseif (not Aiming or (not DEBUG and ((getfenv().mousemoverel and (Configuration.AimMode == "Mouse")) or (getfenv().hookmetamethod and getfenv().newcclosure and getfenv().checkcaller and getfenv().getnamecallmethod and (Configuration.AimMode == "Silent"))))) then
		MouseSensitivity = UserInputService.MouseDeltaSensitivity;
	end
end);
do
	local Window = Fluent:CreateWindow({Title="P3bt [Flag Wars] V1Ì‡",SubTitle="By riruru",TabWidth=UISettings.TabWidth,Size=UDim2.fromOffset(table.unpack(UISettings.Size)),Theme=UISettings.Theme,Acrylic=UISettings.Acrylic,MinimizeKey=UISettings.MinimizeKey});
	local Tabs = {Esp=Window:AddTab({Title="Esp",Icon="rbxassetid://132156735863839"})};
	local Espmenu = Tabs.Esp:AddSection("Esp");
	local function createRosePart(name, color, position)
		local part = Instance.new("Part");
		part.Name = name;
		part.Size = Vector3.new(5, 5, 5);
		part.Position = position;
		part.Anchored = true;
		part.BrickColor = BrickColor.new(color);
		part.CanCollide = false;
		part.Transparency = 1;
		part.Parent = workspace;
		return part;
	end
	local roseParts = {};
	if getfenv().setclipboard then
		Espmenu:AddButton({Title="Skeleton",Description="It will add skeleetons to enemeies !.",Callback=function()
			Window:Dialog({Title="Are you sure?",Content="Import Skeleton ? (Do it only once.)",Buttons={{Title="Yes",Callback=function()
				loadstring(game:HttpGet("https://raw.githubusercontent.com/riruru111/flag-wars/refs/heads/main/esp.lua"))();
			end},{Title="No",Callback=function()
				print("Task canceled.");
			end}}});
		end});
	end
	local Rose4Toggle = Espmenu:AddToggle("Rose4", {Title="Radar",Description="Shows Radar",Default=false});
	Rose4Toggle:OnChanged(function(Value)
		if Value then
			roseParts['rose4'] = createRosePart("rose4", "Bright blue", Vector3.new(10, 50, 0));
		elseif roseParts['rose4'] then
			roseParts['rose4']:Destroy();
			roseParts['rose4'] = nil;
		end
	end);
	local Rose5Toggle = Espmenu:AddToggle("Rose5", {Title="View Tracer",Description="Shows where enemies looking at!",Default=false});
	Rose5Toggle:OnChanged(function(Value)
		if Value then
			roseParts['rose5'] = createRosePart("rose5", "Bright green", Vector3.new(20, 50, 0));
		elseif roseParts['rose5'] then
			roseParts['rose5']:Destroy();
			roseParts['rose5'] = nil;
		end
	end);
	local Rose6Toggle = Espmenu:AddToggle("Rose6", {Title="Chams",Description="Show player through walls!",Default=false});
	Rose6Toggle:OnChanged(function(Value)
		if Value then
			roseParts['rose6'] = createRosePart("rose6", "Bright yellow", Vector3.new(30, 50, 0));
		elseif roseParts['rose6'] then
			roseParts['rose6']:Destroy();
			roseParts['rose6'] = nil;
		end
	end);
	local Rose7Toggle = Espmenu:AddToggle("Rose7", {Title="Name Tag",Description="Show player nametg and hp!",Default=false});
	Rose7Toggle:OnChanged(function(Value)
		if Value then
			roseParts['rose7'] = createRosePart("rose7", "Bright orange", Vector3.new(40, 50, 0));
		elseif roseParts['rose7'] then
			roseParts['rose7']:Destroy();
			roseParts['rose7'] = nil;
		end
	end);
	local Tabs = {Gun=Window:AddTab({Title="Guns",Icon="rbxassetid://127131128807307"})};
	local GunMod = Tabs.Gun:AddSection("Gun Mod");
	local AmmoModToggle = GunMod:AddToggle("AmmoMod", {Title="Ammo Mod Toggle",Description="Toggles Ammo Mod",Default=false});
	local ammoModActive = false;
	local ammoModLoop;
	AmmoModToggle:OnChanged(function(Value)
		if Value then
			ammoModActive = true;
			ammoModLoop = coroutine.create(function()
				while ammoModActive do
					local player = game.Players.LocalPlayer;
					local character = player.Character or player.CharacterAdded:Wait();
					for _, tool in ipairs(player.Backpack:GetChildren()) do
						if tool:FindFirstChild("CurrentAmmo") then
							tool.CurrentAmmo.Value = 7777;
						end
					end
					for _, tool in ipairs(character:GetChildren()) do
						if (tool:IsA("Tool") and tool:FindFirstChild("CurrentAmmo")) then
							tool.CurrentAmmo.Value = 7777;
						end
					end
					wait(0.06);
				end
			end);
			coroutine.resume(ammoModLoop);
		else
			ammoModActive = false;
		end
	end);
	local RecoilModToggle = GunMod:AddToggle("RecoilMod", {Title="Recoil Mod Toggle",Description="Toggles Recoil Mod for all guns",Default=false});
	local recoilModActive = false;
	local recoilModLoop;
	RecoilModToggle:OnChanged(function(Value)
		if Value then
			recoilModActive = true;
			recoilModLoop = coroutine.create(function()
				while recoilModActive do
					local player = game.Players.LocalPlayer;
					local character = player.Character or player.CharacterAdded:Wait();
					for _, tool in ipairs(character:GetChildren()) do
						if (tool:IsA("Tool") and tool:FindFirstChild("Configuration")) then
							local configuration = tool.Configuration;
							if (configuration:FindFirstChild("RecoilMax") and configuration:FindFirstChild("RecoilMin")) then
								configuration.RecoilMax.Value = 0;
								configuration.RecoilMin.Value = 0;
							end
						end
					end
					for _, tool in ipairs(player.Backpack:GetChildren()) do
						if (tool:IsA("Tool") and tool:FindFirstChild("Configuration")) then
							local configuration = tool.Configuration;
							if (configuration:FindFirstChild("RecoilMax") and configuration:FindFirstChild("RecoilMin")) then
								configuration.RecoilMax.Value = 0;
								configuration.RecoilMin.Value = 0;
							end
						end
					end
					wait(1);
				end
			end);
			coroutine.resume(recoilModLoop);
		else
			recoilModActive = false;
			local player = game.Players.LocalPlayer;
			local character = player.Character or player.CharacterAdded:Wait();
			for _, tool in ipairs(character:GetChildren()) do
				if (tool:IsA("Tool") and tool:FindFirstChild("Configuration")) then
					local configuration = tool.Configuration;
					if (configuration:FindFirstChild("RecoilMax") and configuration:FindFirstChild("RecoilMin")) then
						configuration.RecoilMax.Value = 0.5;
						configuration.RecoilMin.Value = 0.29;
					end
				end
			end
			for _, tool in ipairs(player.Backpack:GetChildren()) do
				if (tool:IsA("Tool") and tool:FindFirstChild("Configuration")) then
					local configuration = tool.Configuration;
					if (configuration:FindFirstChild("RecoilMax") and configuration:FindFirstChild("RecoilMin")) then
						configuration.RecoilMax.Value = 0.5;
						configuration.RecoilMin.Value = 0.29;
					end
				end
			end
		end
	end);
	local SpreadModToggle = GunMod:AddToggle("SpreadMod", {Title="Spread Mod Toggle",Description="Toggles Spread Mod for all tools",Default=false});
	local spreadModActive = false;
	local spreadModLoop;
	SpreadModToggle:OnChanged(function(Value)
		if Value then
			spreadModActive = true;
			spreadModLoop = coroutine.create(function()
				while spreadModActive do
					local player = game.Players.LocalPlayer;
					local character = player.Character or player.CharacterAdded:Wait();
					for _, tool in ipairs(character:GetChildren()) do
						if (tool:IsA("Tool") and tool:FindFirstChild("Configuration")) then
							local configuration = tool.Configuration;
							if (configuration:FindFirstChild("MaxSpread") and configuration:FindFirstChild("MinSpread")) then
								configuration.MaxSpread.Value = 0;
								configuration.MinSpread.Value = 0;
							end
						end
					end
					for _, tool in ipairs(player.Backpack:GetChildren()) do
						if (tool:IsA("Tool") and tool:FindFirstChild("Configuration")) then
							local configuration = tool.Configuration;
							if (configuration:FindFirstChild("MaxSpread") and configuration:FindFirstChild("MinSpread")) then
								configuration.MaxSpread.Value = 0;
								configuration.MinSpread.Value = 0;
							end
						end
					end
					wait(1);
				end
			end);
			coroutine.resume(spreadModLoop);
		else
			spreadModActive = false;
			local player = game.Players.LocalPlayer;
			local character = player.Character or player.CharacterAdded:Wait();
			for _, tool in ipairs(character:GetChildren()) do
				if (tool:IsA("Tool") and tool:FindFirstChild("Configuration")) then
					local configuration = tool.Configuration;
					if (configuration:FindFirstChild("MaxSpread") and configuration:FindFirstChild("MinSpread")) then
						configuration.MaxSpread.Value = 1;
						configuration.MinSpread.Value = 0.5;
					end
				end
			end
			for _, tool in ipairs(player.Backpack:GetChildren()) do
				if (tool:IsA("Tool") and tool:FindFirstChild("Configuration")) then
					local configuration = tool.Configuration;
					if (configuration:FindFirstChild("MaxSpread") and configuration:FindFirstChild("MinSpread")) then
						configuration.MaxSpread.Value = 1;
						configuration.MinSpread.Value = 0.5;
					end
				end
			end
		end
	end);
	local FastBulletModToggle = GunMod:AddToggle("FastBulletMod", {Title="Fast Bullet Mod Toggle",Description="Toggles Fast Bullet Mod for all tools",Default=false});
	local fastBulletModActive = false;
	local fastBulletModLoop;
	FastBulletModToggle:OnChanged(function(Value)
		if Value then
			fastBulletModActive = true;
			fastBulletModLoop = coroutine.create(function()
				while fastBulletModActive do
					local player = game.Players.LocalPlayer;
					local character = player.Character or player.CharacterAdded:Wait();
					for _, tool in ipairs(character:GetChildren()) do
						if (tool:IsA("Tool") and tool:FindFirstChild("Configuration") and tool.Configuration:FindFirstChild("ShotCooldown")) then
							tool.Configuration.ShotCooldown.Value = 0.05;
						end
					end
					for _, tool in ipairs(player.Backpack:GetChildren()) do
						if (tool:IsA("Tool") and tool:FindFirstChild("Configuration") and tool.Configuration:FindFirstChild("ShotCooldown")) then
							tool.Configuration.ShotCooldown.Value = 0.05;
						end
					end
					wait(1);
				end
			end);
			coroutine.resume(fastBulletModLoop);
		else
			fastBulletModActive = false;
			local player = game.Players.LocalPlayer;
			local character = player.Character or player.CharacterAdded:Wait();
			if character then
				character:BreakJoints();
			end
		end
	end);
	local BulletSpeedModToggle = GunMod:AddToggle("BulletSpeedMod", {Title="Bullet Speed Mod Toggle",Description="Toggles Bullet Speed Mod",Default=false});
	local bulletSpeedModActive = false;
	local bulletSpeedModLoop;
	BulletSpeedModToggle:OnChanged(function(Value)
		if Value then
			bulletSpeedModActive = true;
			bulletSpeedModLoop = coroutine.create(function()
				while bulletSpeedModActive do
					local player = game.Players.LocalPlayer;
					local character = player.Character or player.CharacterAdded:Wait();
					for _, tool in pairs(character:GetChildren()) do
						if (tool:IsA("Tool") and tool:FindFirstChild("Configuration")) then
							local configuration = tool.Configuration;
							if configuration:FindFirstChild("BulletSpeed") then
								configuration.BulletSpeed.Value = 1200000;
							end
						end
					end
					for _, tool in pairs(player.Backpack:GetChildren()) do
						if (tool:IsA("Tool") and tool:FindFirstChild("Configuration")) then
							local configuration = tool.Configuration;
							if configuration:FindFirstChild("BulletSpeed") then
								configuration.BulletSpeed.Value = 1200000;
							end
						end
					end
					wait(1);
				end
			end);
			coroutine.resume(bulletSpeedModLoop);
		else
			bulletSpeedModActive = false;
			local player = game.Players.LocalPlayer;
			local character = player.Character or player.CharacterAdded:Wait();
			if character then
				character:BreakJoints();
			end
		end
	end);
	local Tabs = {Aimbot=Window:AddTab({Title="Aimbot",Icon="crosshair"})};
	Window:SelectTab(1);
	local AimbotSection = Tabs.Aimbot:AddSection("Aimbot");
	local HitboxExpanderToggle = AimbotSection:AddToggle("HitboxExpander", {Title="Slient aim",Description="Tracks bullet to enemy!",Default=false});
	local hitboxExpanderActive = false;
	local defaultSize = Vector3.new(2, 2, 1);
	_G.HeadSize = 30;
	HitboxExpanderToggle:OnChanged(function(Value)
		if Value then
			hitboxExpanderActive = true;
			_G.Disabled = false;
			game:GetService("RunService").RenderStepped:connect(function()
				if hitboxExpanderActive then
					for _, v in next, game:GetService("Players"):GetPlayers() do
						if (v.Name ~= game:GetService("Players").LocalPlayer.Name) then
							pcall(function()
								local humanoidRootPart = v.Character and v.Character:FindFirstChild("HumanoidRootPart");
								if humanoidRootPart then
									humanoidRootPart.Size = Vector3.new(_G.HeadSize, _G.HeadSize, _G.HeadSize);
									humanoidRootPart.Transparency = 1;
									humanoidRootPart.BrickColor = BrickColor.new("Really blue");
									humanoidRootPart.Material = Enum.Material.Neon;
									humanoidRootPart.CanCollide = false;
								end
							end);
						end
					end
				end
			end);
		else
			hitboxExpanderActive = false;
			_G.Disabled = true;
			for _, v in next, game:GetService("Players"):GetPlayers() do
				if (v.Name ~= game:GetService("Players").LocalPlayer.Name) then
					pcall(function()
						local humanoidRootPart = v.Character and v.Character:FindFirstChild("HumanoidRootPart");
						if humanoidRootPart then
							humanoidRootPart.Size = defaultSize;
							humanoidRootPart.Transparency = 1;
							humanoidRootPart.BrickColor = BrickColor.new("Medium stone grey");
							humanoidRootPart.Material = Enum.Material.Plastic;
							humanoidRootPart.CanCollide = false;
						end
					end);
				end
			end
		end
	end);
	local AimbotToggle = AimbotSection:AddToggle("Aimbot", {Title="Aimbot Toggle",Description="Toggles the Aimbot",Default=Configuration.Aimbot});
	AimbotToggle:OnChanged(function(Value)
		Configuration.Aimbot = Value;
	end);
	local AimModeDropdown = AimbotSection:AddDropdown("AimMode", {Title="Aim Mode",Description="Changes the Aim Mode",Values={"Camera"},Default=Configuration.AimMode,Callback=function(Value)
		Configuration.AimMode = Value;
	end});
	if getfenv().mousemoverel then
		table.insert(AimModeDropdown.Values, "Mouse");
		AimModeDropdown:BuildDropdownList();
	else
		ShowWarning = true;
	end
	if (getfenv().hookmetamethod and getfenv().newcclosure and getfenv().checkcaller and getfenv().getnamecallmethod) then
		table.insert(AimModeDropdown.Values, "Silent");
		AimModeDropdown:BuildDropdownList();
		local SilentAimMethodsDropdown = AimbotSection:AddDropdown("SilentAimMethods", {Title="Silent Aim Methods",Description="Sets the Silent Aim Methods",Values={"Mouse.Hit / Mouse.Target","GetMouseLocation","Raycast","FindPartOnRay","FindPartOnRayWithIgnoreList","FindPartOnRayWithWhitelist"},Multi=true,Default=Configuration.SilentAimMethods});
		SilentAimMethodsDropdown:OnChanged(function(Value)
			Configuration.SilentAimMethods = {};
			for Key, _ in next, Value do
				if (typeof(Key) == "string") then
					table.insert(Configuration.SilentAimMethods, Key);
				end
			end
		end);
		AimbotSection:AddSlider("SilentAimChance", {Title="Silent Aim Chance",Description="Changes the Hit Chance for Silent Aim",Default=Configuration.SilentAimChance,Min=1,Max=100,Rounding=1,Callback=function(Value)
			Configuration.SilentAimChance = Value;
		end});
	else
		ShowWarning = true;
	end
	local OffAfterKillToggle = AimbotSection:AddToggle("OffAfterKill", {Title="Off After Kill",Description="Disables the Aiming Mode after killing a Target",Default=Configuration.OffAfterKill});
	OffAfterKillToggle:OnChanged(function(Value)
		Configuration.OffAfterKill = Value;
	end);
	local AimKeybind = AimbotSection:AddKeybind("AimKey", {Title="Aim Key",Description="Changes the Aim Key",Default=Configuration.AimKey,ChangedCallback=function(Value)
		Configuration.AimKey = Value;
	end});
	if (AimKeybind.Value == "RMB") then
		Configuration.AimKey = Enum.UserInputType.MouseButton2;
	else
		Configuration.AimKey = Enum.KeyCode[AimKeybind.Value];
	end
	local AimPartDropdown = AimbotSection:AddDropdown("AimPart", {Title="Aim Part",Description="Changes the Aim Part",Values=Configuration.AimPartDropdownValues,Default=Configuration.AimPart,Callback=function(Value)
		Configuration.AimPart = Value;
	end});
	task.spawn(function()
		while task.wait(1) do
			if not Fluent then
				break;
			end
			if (Configuration.RandomAimPart and (#Configuration.AimPartDropdownValues > 0)) then
				AimPartDropdown:SetValue(Configuration.AimPartDropdownValues[Random.new():NextInteger(1, #Configuration.AimPartDropdownValues)]);
			end
		end
	end);
	local FoVCheckToggle = AimbotSection:AddToggle("FoVCheck", {Title="FoV Check",Description="Toggles the FoV Check",Default=Configuration.FoVCheck});
	FoVCheckToggle:OnChanged(function(Value)
		Configuration.FoVCheck = Value;
	end);
	AimbotSection:AddSlider("FoVRadius", {Title="FoV Radius",Description="Changes the FoV Radius",Default=Configuration.FoVRadius,Min=10,Max=1000,Rounding=1,Callback=function(Value)
		Configuration.FoVRadius = Value;
	end});
	local ShowFoVToggle = AimbotSection:AddToggle("ShowFoV", {Title="Show FoV",Description="Toggles the FoV Show",Default=Configuration.ShowFoV});
	ShowFoVToggle:OnChanged(function(Value)
		Configuration.ShowFoV = Value;
	end);
	AimbotSection:AddSlider("FoVThickness", {Title="FoV Thickness",Description="Changes the FoV Thickness",Default=Configuration.FoVThickness,Min=1,Max=10,Rounding=1,Callback=function(Value)
		Configuration.FoVThickness = Value;
	end});
	AimbotSection:AddSlider("FoVTransparency", {Title="FoV Transparency",Description="Changes the FoV Transparency",Default=Configuration.FoVTransparency,Min=0.1,Max=1,Rounding=1,Callback=function(Value)
		Configuration.FoVTransparency = Value;
	end});
	local FoVColourPicker = AimbotSection:AddColorpicker("FoVColour", {Title="FoV Colour",Description="Changes the FoV Colour",Default=Configuration.FoVColour,Callback=function(Value)
		Configuration.FoVColour = Value;
	end});
	AimbotSection:AddSlider("Sensitivity", {Title="Sensitivity",Description="Smoothes out the Mouse / Camera Movements when Aiming",Default=Configuration.Sensitivity,Min=1,Max=100,Rounding=1,Callback=function(Value)
		Configuration.Sensitivity = Value;
	end});
	local Tabs = {Limitless=Window:AddTab({Title="Limitless",Icon="rbxassetid://8569322835"})};
	if getfenv().setclipboard then
		Tabs.Limitless:AddButton({Title="Limitless",Description="Be limitless.",Callback=function()
			Window:Dialog({Title="Are you sure?",Content="If you want to do it, press Confirm to proceed or Exit to cancel. After you get in limitless if u die you must leave game and join again or wait till next round.",Buttons={{Title="Confirm",Callback=function()
				local player = game.Players.LocalPlayer;
				local character = player.Character or player.CharacterAdded:Wait();
				local head = character:WaitForChild("Head");
				character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame + Vector3.new(0, 350, 0);
				character.HumanoidRootPart.Anchored = true;
				wait(1);
				character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame + Vector3.new(0, -150, 0);
				for _, item in pairs(workspace:GetDescendants()) do
					if item:IsA("BasePart") then
						item.CanCollide = false;
					end
				end
				print("Tasks completed.");
				local numberOfBalls = 10;
				local radius = 7;
				local balls = {};
				for i = 1, numberOfBalls do
					local ball = Instance.new("Part");
					ball.Shape = Enum.PartType.Ball;
					ball.Size = Vector3.new(1, 1, 1);
					ball.Color = Color3.new(0.5, 0, 1);
					ball.Material = Enum.Material.Neon;
					ball.Anchored = true;
					ball.CanCollide = false;
					ball.Parent = workspace;
					local particleEmitter = Instance.new("ParticleEmitter");
					particleEmitter.Color = ColorSequence.new(Color3.new(1, 0.4, 0.7));
					particleEmitter.Size = NumberSequence.new(0.5);
					particleEmitter.Lifetime = NumberRange.new(1, 2);
					particleEmitter.Rate = 4;
					particleEmitter.Speed = NumberRange.new(1, 3);
					particleEmitter.VelocityInheritance = 1;
					particleEmitter.Parent = ball;
					local angle = ((i - 1) * (360 / numberOfBalls) * math.pi) / 180;
					local x = radius * math.cos(angle);
					local z = radius * math.sin(angle);
					local y = radius * math.sin(math.rad(45));
					ball.Position = head.Position + Vector3.new(x, y, z);
					table.insert(balls, ball);
				end
				while true do
					for i = 1, numberOfBalls do
						local angle = (((tick() * 40) + ((i - 1) * (360 / numberOfBalls))) * math.pi) / 180;
						local x = radius * math.cos(angle);
						local z = radius * math.sin(angle);
						local y = radius * math.sin(math.rad(45));
						balls[i].Position = head.Position + Vector3.new(x, y, z);
					end
					wait(0.03);
				end
			end},{Title="Exit",Callback=function()
				print("Task canceled.");
			end}}});
		end});
	end
	Tabs.Settings = Window:AddTab({Title="ãƒªãƒ«ãƒ«",Icon="rbxassetid://89024621697883"});
	Tabs.Settings:AddParagraph({Title="About Me",Content="Hello, my nammed mysalf as riruru, i make game scripts, this script took bt afforde to make and thank you for using it, you can ask me in my discord what game you need, what wha features exactly, felll free to ask, you also can sub me in youtube."});
	if getfenv().setclipboard then
		Tabs.Settings:AddButton({Title="Join Our Server",Description="Paste it into the Browser Tab",Callback=function()
			getfenv().setclipboard("https://discord.gg/tUrTZfTzRJ");
			Window:Dialog({Title="P3bt [Flag Wars] V1Ì‡",Content="Invite Link has been copied to the Clipboard!",Buttons={{Title="Confirm"}}});
		end});
		Tabs.Settings:AddKeybind("MinimizeKey", {Title="Minimize Key",Description="Changes the Minimize Key",Default=Fluent.MinimizeKey,ChangedCallback=function(Value)
			UISettings.MinimizeKey = ((Value ~= Enum.UserInputType.MouseButton2) and UserInputService:GetStringForKeyCode(Value)) or "RMB";
			InterfaceManager:ExportSettings();
		end});
		Fluent.MinimizeKeybind = Fluent.Options.MinimizeKey;
		if (getfenv().isfile and getfenv().readfile and getfenv().writefile and getfenv().delfile) then
			local ConfigurationManager = Tabs.Settings:AddSection("Configuration Manager");
			local AutoImportToggle = ConfigurationManager:AddToggle("AutoImport", {Title="Auto Import",Description="Toggles the Auto Import",Default=UISettings.AutoImport});
			AutoImportToggle:OnChanged(function(Value)
				UISettings.AutoImport = Value;
				InterfaceManager:ExportSettings();
			end);
			ConfigurationManager:AddParagraph({Title=string.format("Manager for %s", game.Name),Content=string.format("Universe ID is %s", game.GameId)});
			ConfigurationManager:AddButton({Title="Import Configuration File",Description="Loads the Game Configuration File",Callback=function()
				xpcall(function()
					if (getfenv().isfile(string.format("%s.riruru", game.GameId)) and getfenv().readfile(string.format("%s.riruru", game.GameId))) then
						local ImportedConfiguration = HttpService:JSONDecode(getfenv().readfile(string.format("%s.riruru", game.GameId)));
						for Key, Value in next, ImportedConfiguration do
							if ((Key == "AimKey") or (Key == "TriggerKey")) then
								Fluent.Options[Key]:SetValue(Value);
								if (Value == "RMB") then
									Configuration[Key] = Enum.UserInputType.MouseButton2;
								else
									Configuration[Key] = Enum.KeyCode[Value];
								end
							elseif ((Key == "AimPart") or (typeof(Configuration[Key]) == "table")) then
								Configuration[Key] = Value;
							elseif ((Key == "FoVColour") or (Key == "ESPColour")) then
								Fluent.Options[Key]:SetValueRGB(UnpackColour(Value));
							elseif ((Configuration[Key] ~= nil) and Fluent.Options[Key]) then
								Fluent.Options[Key]:SetValue(Value);
							end
						end
						for Key, Option in next, Fluent.Options do
							if (Option.Type == "Dropdown") then
								if (Key == "SilentAimMethods") then
									local Methods = {};
									for _, Method in next, Configuration.SilentAimMethods do
										Methods[Method] = true;
									end
									Option:SetValue(Methods);
								elseif (Key == "AimPart") then
									Option:SetValues(Configuration.AimPartDropdownValues);
									Option:SetValue(Configuration.AimPart);
								elseif (Key == "IgnoredPlayers") then
									Option:SetValues(Configuration.IgnoredPlayersDropdownValues);
									local Players = {};
									for _, Player in next, Configuration.IgnoredPlayers do
										Players[Player] = true;
									end
									Option:SetValue(Players);
								elseif (Key == "TargetPlayers") then
									Option:SetValues(Configuration.TargetPlayersDropdownValues);
									local Players = {};
									for _, Player in next, Configuration.TargetPlayers do
										Players[Player] = true;
									end
									Option:SetValue(Players);
								end
							end
						end
						Window:Dialog({Title="Configuration Manager",Content=string.format("Configuration File %s.riruru has been successfully loaded!", game.GameId),Buttons={{Title="Confirm"}}});
					else
						Window:Dialog({Title="Configuration Manager",Content=string.format("Configuration File %s.riruru could not be found!", game.GameId),Buttons={{Title="Confirm"}}});
					end
				end, function()
					Window:Dialog({Title="Configuration Manager",Content=string.format("An Error occurred when loading the Configuration File %s.riruru", game.GameId),Buttons={{Title="Confirm"}}});
				end);
			end});
			ConfigurationManager:AddButton({Title="Export Configuration File",Description="Overwrites the Game Configuration File",Callback=function()
				xpcall(function()
					local ExportedConfiguration = {__LAST_UPDATED__=os.date()};
					for Key, Value in next, Configuration do
						if ((Key == "AimKey") or (Key == "TriggerKey")) then
							ExportedConfiguration[Key] = ((Value ~= Enum.UserInputType.MouseButton2) and UserInputService:GetStringForKeyCode(Value)) or "RMB";
						elseif ((Key == "FoVColour") or (Key == "ESPColour")) then
							ExportedConfiguration[Key] = PackColour(Value);
						else
							ExportedConfiguration[Key] = Value;
						end
					end
					ExportedConfiguration = HttpService:JSONEncode(ExportedConfiguration);
					getfenv().writefile(string.format("%s.riruru", game.GameId), ExportedConfiguration);
					Window:Dialog({Title="Configuration Manager",Content=string.format("Configuration File %s.riruru has been successfully overwritten!", game.GameId),Buttons={{Title="Confirm"}}});
				end, function()
					Window:Dialog({Title="Configuration Manager",Content=string.format("An Error occurred when overwriting the Configuration File %s.riruru", game.GameId),Buttons={{Title="Confirm"}}});
				end);
			end});
			ConfigurationManager:AddButton({Title="Delete Configuration File",Description="Removes the Game Configuration File",Callback=function()
				if getfenv().isfile(string.format("%s.riruru", game.GameId)) then
					getfenv().delfile(string.format("%s.riruru", game.GameId));
					Window:Dialog({Title="Configuration Manager",Content=string.format("Configuration File %s.riruru has been successfully removed!", game.GameId),Buttons={{Title="Confirm"}}});
				else
					Window:Dialog({Title="Configuration Manager",Content=string.format("Configuration File %s.riruru could not be found!", game.GameId),Buttons={{Title="Confirm"}}});
				end
			end});
		else
			ShowWarning = true;
		end
	else
	end
	if UISettings.ShowWarnings then
		if DEBUG then
			Window:Dialog({Title="Warning",Content="Running in Debugging Mode. Some Features may not work properly.",Buttons={{Title="Confirm"}}});
		elseif ShowWarning then
			Window:Dialog({Title="Warning",Content="This Executer is kinda limited!  Some Features May not work.",Buttons={{Title="Confirm"}}});
		end
	end
end
local function Notify(Message)
	if (Fluent and (typeof(Message) == "string")) then
		Fluent:Notify({Title="P3bt [Flag Wars] V1Ì‡",Content=Message,SubContent="By riruru",Duration=1.5});
	end
end
Notify("Successfully initialized!");
local function ResetAimbotFields(SaveAiming, SaveTarget)
	Aiming = (SaveAiming and Aiming) or false;
	Target = (SaveTarget and Target) or nil;
	if Tween then
		Tween:Cancel();
		Tween = nil;
	end
	UserInputService.MouseDeltaSensitivity = MouseSensitivity;
end
local InputBegan;
InputBegan = UserInputService.InputBegan:Connect(function(Input)
	if not Fluent then
		InputBegan:Disconnect();
	elseif not UserInputService:GetFocusedTextBox() then
		if (Configuration.Aimbot and ((Input.KeyCode == Configuration.AimKey) or (Input.UserInputType == Configuration.AimKey))) then
			if Aiming then
				ResetAimbotFields();
			else
				Aiming = true;
			end
		elseif (Configuration.TriggerBot and ((Input.KeyCode == Configuration.TriggerKey) or (Input.UserInputType == Configuration.TriggerKey))) then
			if Triggering then
				Triggering = false;
			else
				Triggering = true;
			end
		end
	end
end);
local InputEnded;
InputEnded = UserInputService.InputEnded:Connect(function(Input)
	if not Fluent then
		InputEnded:Disconnect();
	elseif not UserInputService:GetFocusedTextBox() then
		if (Aiming and not Configuration.OnePressAimingMode and ((Input.KeyCode == Configuration.AimKey) or (Input.UserInputType == Configuration.AimKey))) then
			ResetAimbotFields();
		elseif (Triggering and not Configuration.OnePressTriggeringMode and ((Input.KeyCode == Configuration.TriggerKey) or (Input.UserInputType == Configuration.TriggerKey))) then
			Triggering = false;
		end
	end
end);
local function CalculateDirection(Origin, Position, Magnitude)
	return ((typeof(Origin) == "Vector3") and (typeof(Position) == "Vector3") and (typeof(Magnitude) == "number") and ((Position - Origin).Unit * Magnitude)) or Vector3.zero;
end
local function CalculateChance(Percentage)
	return ((typeof(Percentage) == "number") and ((math.round(math.clamp(Percentage, 1, 100)) / 100) >= (math.round(Random.new():NextNumber() * 100) / 100))) or false;
end
local function Abbreviate(Number)
	if (typeof(Number) == "number") then
		local Abbreviations = {N=(10 ^ 30),O=(10 ^ 27),Sp=(10 ^ 24),Sx=(10 ^ 21),Qn=(10 ^ 18),Qd=(10 ^ 15),T=(10 ^ 12),B=(10 ^ 9),M=(10 ^ 6),K=(10 ^ 3)};
		local Selected = 0;
		local Result = tostring(math.round(Number));
		for Key, Value in next, Abbreviations do
			if ((math.abs(Number) >= Value) and (Value > Selected)) then
				Selected = Value;
				Result = string.format("%s%s", tostring(math.round(Number / Value)), Key);
			end
		end
		return Result;
	end
	return Number;
end
local function IsReady(Target)
	if (Target and Target:FindFirstChildWhichIsA("Humanoid") and (Target:FindFirstChildWhichIsA("Humanoid").Health > 0) and not Target:FindFirstChildWhichIsA("ForceField") and Configuration.AimPart and Target:FindFirstChild(Configuration.AimPart) and Target:FindFirstChild(Configuration.AimPart):IsA("BasePart") and Player.Character and Player.Character:FindFirstChildWhichIsA("Humanoid") and (Player.Character:FindFirstChildWhichIsA("Humanoid").Health > 0) and Player.Character:FindFirstChild(Configuration.AimPart) and Player.Character:FindFirstChild(Configuration.AimPart):IsA("BasePart")) then
		local _Player = Players:GetPlayerFromCharacter(Target);
		if (not _Player or (_Player == Player)) then
			return false;
		end
		local TargetPart = Target:FindFirstChild(Configuration.AimPart);
		local NativePart = Player.Character:FindFirstChild(Configuration.AimPart);
		if (Configuration.TeamCheck and (_Player.TeamColor == Player.TeamColor)) then
			return false;
		elseif (Configuration.FriendCheck and _Player:IsFriendsWith(Player.UserId)) then
			return false;
		elseif Configuration.WallCheck then
			local RayDirection = CalculateDirection(NativePart.Position, TargetPart.Position, (TargetPart.Position - NativePart.Position).Magnitude);
			local RaycastParameters = RaycastParams.new();
			RaycastParameters.FilterType = Enum.RaycastFilterType.Exclude;
			RaycastParameters.FilterDescendantsInstances = {Player.Character};
			RaycastParameters.IgnoreWater = not Configuration.WaterCheck;
			local RaycastResult = workspace:Raycast(NativePart.Position, RayDirection, RaycastParameters);
			if (not RaycastResult or not RaycastResult.Instance or not RaycastResult.Instance:FindFirstAncestor(_Player.Name)) then
				return false;
			end
		elseif (Configuration.VerifiedBadgeCheck and _Player.HasVerifiedBadge) then
			return false;
		elseif (Configuration.MagnitudeCheck and ((TargetPart.Position - NativePart.Position).Magnitude > Configuration.TriggerMagnitude)) then
			return false;
		elseif (Configuration.TransparencyCheck and Target:FindFirstChild("Head") and Target:FindFirstChild("Head"):IsA("BasePart") and (Target:FindFirstChild("Head").Transparency >= Configuration.IgnoredTransparency)) then
			return false;
		elseif ((Configuration.WhitelistedGroupCheck and _Player:IsInGroup(Configuration.WhitelistedGroup)) or (Configuration.BlacklistedGroupCheck and not _Player:IsInGroup(Configuration.BlacklistedGroup))) then
			return false;
		elseif ((Configuration.IgnoredPlayersCheck and table.find(Configuration.IgnoredPlayers, _Player.Name)) or (Configuration.TargetPlayersCheck and not table.find(Configuration.TargetPlayers, _Player.Name))) then
			return false;
		end
		local OffsetIncrement = (Configuration.UseOffset and ((Configuration.AutoOffset and (Vector3.new(0, ((((TargetPart.Position.Y * Configuration.StaticOffsetIncrement * (TargetPart.Position - NativePart.Position).Magnitude) / 1000) <= Configuration.MaxAutoOffset) and ((TargetPart.Position.Y * Configuration.StaticOffsetIncrement * (TargetPart.Position - NativePart.Position).Magnitude) / 1000)) or Configuration.MaxAutoOffset, 0) + ((Target:FindFirstChildWhichIsA("Humanoid").MoveDirection * Configuration.DynamicOffsetIncrement) / 10))) or ((Configuration.OffsetType == "Static") and Vector3.new(0, (TargetPart.Position.Y * Configuration.StaticOffsetIncrement) / 10, 0)) or ((Configuration.OffsetType == "Dynamic") and ((Target:FindFirstChildWhichIsA("Humanoid").MoveDirection * Configuration.DynamicOffsetIncrement) / 10)) or (Vector3.new(0, (TargetPart.Position.Y * Configuration.StaticOffsetIncrement) / 10, 0) + ((Target:FindFirstChildWhichIsA("Humanoid").MoveDirection * Configuration.DynamicOffsetIncrement) / 10)))) or Vector3.zero;
		local NoiseFrequency = (Configuration.UseNoise and Vector3.new(Random.new():NextNumber(-Configuration.NoiseFrequency / 100, Configuration.NoiseFrequency / 100), Random.new():NextNumber(-Configuration.NoiseFrequency / 100, Configuration.NoiseFrequency / 100), Random.new():NextNumber(-Configuration.NoiseFrequency / 100, Configuration.NoiseFrequency / 100))) or Vector3.zero;
		return true, Target, {workspace.CurrentCamera:WorldToViewportPoint(TargetPart.Position + OffsetIncrement + NoiseFrequency)}, TargetPart.Position + OffsetIncrement + NoiseFrequency, ((TargetPart.Position + OffsetIncrement + NoiseFrequency) - NativePart.Position).Magnitude, CFrame.new(TargetPart.Position + OffsetIncrement + NoiseFrequency) * CFrame.fromEulerAnglesYXZ(math.rad(TargetPart.Orientation.X), math.rad(TargetPart.Orientation.Y), math.rad(TargetPart.Orientation.Z)), TargetPart;
	end
	return false;
end
local ValidArguments = {Raycast={Required=3,Arguments={"Instance","Vector3","Vector3","RaycastParams"}},FindPartOnRay={Required=2,Arguments={"Instance","Ray","Instance","boolean","boolean"}},FindPartOnRayWithIgnoreList={Required=3,Arguments={"Instance","Ray","table","boolean","boolean"}},FindPartOnRayWithWhitelist={Required=3,Arguments={"Instance","Ray","table","boolean"}}};
local function ValidateArguments(Arguments, Method)
	if ((typeof(Arguments) ~= "table") or (typeof(Method) ~= "table") or (#Arguments < Method.Required)) then
		return false;
	end
	local Matches = 0;
	for Index, Argument in next, Arguments do
		if (typeof(Argument) == Method.Arguments[Index]) then
			Matches = Matches + 1;
		end
	end
	return Matches >= Method.Required;
end
do
	if (not DEBUG and getfenv().hookmetamethod and getfenv().newcclosure and getfenv().checkcaller and getfenv().getnamecallmethod) then
		local OldIndex;
		OldIndex = getfenv().hookmetamethod(game, "__index", getfenv().newcclosure(function(self, Index)
			if (Fluent and not getfenv().checkcaller() and (Configuration.AimMode == "Silent") and table.find(Configuration.SilentAimMethods, "Mouse.Hit / Mouse.Target") and Aiming and IsReady(Target) and select(3, IsReady(Target))[2] and CalculateChance(Configuration.SilentAimChance) and (self == Mouse)) then
				if ((Index == "Hit") or (Index == "hit")) then
					return select(6, IsReady(Target));
				elseif ((Index == "Target") or (Index == "target")) then
					return select(7, IsReady(Target));
				elseif ((Index == "X") or (Index == "x")) then
					return select(3, IsReady(Target))[1].X;
				elseif ((Index == "Y") or (Index == "y")) then
					return select(3, IsReady(Target))[1].Y;
				elseif ((Index == "UnitRay") or (Index == "unitRay")) then
					return Ray.new(self.Origin, (select(6, IsReady(Target)) - self.Origin).Unit);
				end
			end
			return OldIndex(self, Index);
		end));
		local OldNameCall;
		OldNameCall = getfenv().hookmetamethod(game, "__namecall", getfenv().newcclosure(function(...)
			local Method = getfenv().getnamecallmethod();
			local Arguments = {...};
			local self = Arguments[1];
			if (Fluent and not getfenv().checkcaller() and (Configuration.AimMode == "Silent") and Aiming and IsReady(Target) and select(3, IsReady(Target))[2] and CalculateChance(Configuration.SilentAimChance)) then
				if (table.find(Configuration.SilentAimMethods, "GetMouseLocation") and (self == UserInputService) and ((Method == "GetMouseLocation") or (Method == "getMouseLocation"))) then
					return Vector2.new(select(3, IsReady(Target))[1].X, select(3, IsReady(Target))[1].Y);
				elseif (table.find(Configuration.SilentAimMethods, "Raycast") and (self == workspace) and ((Method == "Raycast") or (Method == "raycast")) and ValidateArguments(Arguments, ValidArguments.Raycast)) then
					Arguments[3] = CalculateDirection(Arguments[2], select(4, IsReady(Target)), select(5, IsReady(Target)));
					return OldNameCall(table.unpack(Arguments));
				elseif (table.find(Configuration.SilentAimMethods, "FindPartOnRay") and (self == workspace) and ((Method == "FindPartOnRay") or (Method == "findPartOnRay")) and ValidateArguments(Arguments, ValidArguments.FindPartOnRay)) then
					Arguments[2] = Ray.new(Arguments[2].Origin, CalculateDirection(Arguments[2].Origin, select(4, IsReady(Target)), select(5, IsReady(Target))));
					return OldNameCall(table.unpack(Arguments));
				elseif (table.find(Configuration.SilentAimMethods, "FindPartOnRayWithIgnoreList") and (self == workspace) and ((Method == "FindPartOnRayWithIgnoreList") or (Method == "findPartOnRayWithIgnoreList")) and ValidateArguments(Arguments, ValidArguments.FindPartOnRayWithIgnoreList)) then
					Arguments[2] = Ray.new(Arguments[2].Origin, CalculateDirection(Arguments[2].Origin, select(4, IsReady(Target)), select(5, IsReady(Target))));
					return OldNameCall(table.unpack(Arguments));
				elseif (table.find(Configuration.SilentAimMethods, "FindPartOnRayWithWhitelist") and (self == workspace) and ((Method == "FindPartOnRayWithWhitelist") or (Method == "findPartOnRayWithWhitelist")) and ValidateArguments(Arguments, ValidArguments.FindPartOnRayWithWhitelist)) then
					Arguments[2] = Ray.new(Arguments[2].Origin, CalculateDirection(Arguments[2].Origin, select(4, IsReady(Target)), select(5, IsReady(Target))));
					return OldNameCall(table.unpack(Arguments));
				end
			end
			return OldNameCall(...);
		end));
	end
end
local function HandleTriggerBot()
	if (not DEBUG and Fluent and getfenv().mouse1click and Triggering and ((Configuration.SmartTriggerBot and Aiming) or not Configuration.SmartTriggerBot) and Mouse.Target and IsReady(Mouse.Target:FindFirstAncestorWhichIsA("Model"))) then
		getfenv().mouse1click();
	end
end
local function Visualize(Object)
	if (not DEBUG and Fluent and getfenv().Drawing and (typeof(Object) == "string")) then
		if (string.lower(Object) == "fov") then
			local FoV = getfenv().Drawing.new("Circle");
			FoV.Visible = false;
			FoV.ZIndex = 2;
			FoV.Filled = false;
			FoV.NumSides = 1000;
			FoV.Radius = Configuration.FoVRadius;
			FoV.Thickness = Configuration.FoVThickness;
			FoV.Transparency = Configuration.FoVTransparency;
			FoV.Color = Configuration.FoVColour;
			return FoV;
		elseif (string.lower(Object) == "espbox") then
			local ESPBox = getfenv().Drawing.new("Square");
			ESPBox.Visible = false;
			ESPBox.ZIndex = 1;
			ESPBox.Filled = false;
			ESPBox.Thickness = Configuration.ESPThickness;
			ESPBox.Transparency = Configuration.ESPTransparency;
			ESPBox.Color = Configuration.ESPColour;
			return ESPBox;
		elseif (string.lower(Object) == "nameesp") then
			local NameESP = getfenv().Drawing.new("Text");
			NameESP.Visible = false;
			NameESP.ZIndex = 1;
			NameESP.Center = true;
			NameESP.Outline = true;
			NameESP.Size = Configuration.NameESPSize;
			NameESP.Transparency = Configuration.ESPTransparency;
			NameESP.Color = Configuration.ESPColour;
			return NameESP;
		elseif (string.lower(Object) == "traceresp") then
			local TracerESP = getfenv().Drawing.new("Line");
			TracerESP.Visible = false;
			TracerESP.ZIndex = 1;
			TracerESP.Thickness = Configuration.ESPThickness;
			TracerESP.Transparency = Configuration.ESPTransparency;
			TracerESP.Color = Configuration.ESPColour;
			return TracerESP;
		end
	end
	return nil;
end
local Visuals = {FoV=Visualize("FoV")};
local function ClearVisual(Visual, Key)
	local FoundVisual = table.find(Visuals, Visual);
	if (Visual and (FoundVisual or (Key == "FoV"))) then
		if Visual.Destroy then
			Visual:Destroy();
		elseif Visual.Remove then
			Visual:Remove();
		end
		if FoundVisual then
			table.remove(Visuals, FoundVisual);
		elseif (Key == "FoV") then
			Visuals['FoV'] = nil;
		end
	end
end
local function ClearVisuals()
	for Key, Visual in next, Visuals do
		ClearVisual(Visual, Key);
	end
end
local function VisualizeFoV()
	if not Fluent then
		return ClearVisuals();
	end
	local MouseLocation = UserInputService:GetMouseLocation();
	Visuals.FoV.Position = Vector2.new(MouseLocation.X, MouseLocation.Y);
	Visuals.FoV.Radius = Configuration.FoVRadius;
	Visuals.FoV.Thickness = Configuration.FoVThickness;
	Visuals.FoV.Transparency = Configuration.FoVTransparency;
	Visuals.FoV.Color = Configuration.FoVColour;
	Visuals.FoV.Visible = Configuration.ShowFoV;
end
local ESPLibrary = {};
ESPLibrary.Initialize = function(self, Target)
	if not Fluent then
		ClearVisuals();
		return nil;
	elseif (typeof(Target) ~= "Instance") then
		return nil;
	end
	local self = setmetatable({}, {__index=ESPLibrary});
	self.Player = Players:GetPlayerFromCharacter(Target);
	self.Character = Target;
	self.ESPBox = Visualize("ESPBox");
	self.NameESP = Visualize("NameESP");
	self.TracerESP = Visualize("TracerESP");
	table.insert(Visuals, self.ESPBox);
	table.insert(Visuals, self.NameESP);
	table.insert(Visuals, self.TracerESP);
	local Head = self.Character:FindFirstChild("Head");
	local HumanoidRootPart = self.Character:FindFirstChild("HumanoidRootPart");
	local Humanoid = self.Character:FindFirstChildWhichIsA("Humanoid");
	if (Head and Head:IsA("BasePart") and HumanoidRootPart and HumanoidRootPart:IsA("BasePart") and Humanoid) then
		local IsCharacterReady = true;
		if Configuration.SmartESP then
			IsCharacterReady = IsReady(self.Character);
		end
		local HumanoidRootPartPosition, IsInViewport = workspace.CurrentCamera:WorldToViewportPoint(HumanoidRootPart.Position);
		local TopPosition = workspace.CurrentCamera:WorldToViewportPoint(Head.Position + Vector3.new(0, 0.5, 0));
		local BottomPosition = workspace.CurrentCamera:WorldToViewportPoint(HumanoidRootPart.Position - Vector3.new(0, 3, 0));
		if IsInViewport then
			self.ESPBox.Size = Vector2.new(2350 / HumanoidRootPartPosition.Z, TopPosition.Y - BottomPosition.Y);
			self.ESPBox.Position = Vector2.new(HumanoidRootPartPosition.X - (self.ESPBox.Size.X / 2), HumanoidRootPartPosition.Y - (self.ESPBox.Size.Y / 2));
			self.NameESP.Text = string.format("@%s | %s%% | %sm", self.Player.Name, Abbreviate(Humanoid.Health), (Player.Character and Player.Character:FindFirstChild("Head") and Player.Character:FindFirstChild("Head"):IsA("BasePart") and Abbreviate((Head.Position - Player.Character:FindFirstChild("Head").Position).Magnitude)) or "?");
			self.NameESP.Position = Vector2.new(HumanoidRootPartPosition.X, (HumanoidRootPartPosition.Y + (self.ESPBox.Size.Y / 2)) - 25);
			self.TracerESP.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y);
			self.TracerESP.To = Vector2.new(HumanoidRootPartPosition.X, HumanoidRootPartPosition.Y - (self.ESPBox.Size.Y / 2));
			if (Configuration.ESPUseTeamColour and not Configuration.RainbowVisuals) then
				local TeamColour = self.Player.TeamColor.Color;
				self.ESPBox.Color = TeamColour;
				self.NameESP.Color = TeamColour;
				self.TracerESP.Color = TeamColour;
			end
		end
		self.ESPBox.Visible = Configuration.ESPBox and IsCharacterReady and IsInViewport;
		self.NameESP.Visible = Configuration.NameESP and IsCharacterReady and IsInViewport;
		self.TracerESP.Visible = Configuration.TracerESP and IsCharacterReady and IsInViewport;
	end
	return self;
end;
ESPLibrary.Visualize = function(self)
	if not Fluent then
		return ClearVisuals();
	elseif not self.Character then
		return self:Disconnect();
	end
	local Head = self.Character:FindFirstChild("Head");
	local HumanoidRootPart = self.Character:FindFirstChild("HumanoidRootPart");
	local Humanoid = self.Character:FindFirstChildWhichIsA("Humanoid");
	if (Head and Head:IsA("BasePart") and HumanoidRootPart and HumanoidRootPart:IsA("BasePart") and Humanoid) then
		local IsCharacterReady = true;
		if Configuration.SmartESP then
			IsCharacterReady = IsReady(self.Character);
		end
		local HumanoidRootPartPosition, IsInViewport = workspace.CurrentCamera:WorldToViewportPoint(HumanoidRootPart.Position);
		local TopPosition = workspace.CurrentCamera:WorldToViewportPoint(Head.Position + Vector3.new(0, 0.5, 0));
		local BottomPosition = workspace.CurrentCamera:WorldToViewportPoint(HumanoidRootPart.Position - Vector3.new(0, 3, 0));
		if IsInViewport then
			self.ESPBox.Size = Vector2.new(2350 / HumanoidRootPartPosition.Z, TopPosition.Y - BottomPosition.Y);
			self.ESPBox.Position = Vector2.new(HumanoidRootPartPosition.X - (self.ESPBox.Size.X / 2), HumanoidRootPartPosition.Y - (self.ESPBox.Size.Y / 2));
			self.ESPBox.Thickness = Configuration.ESPThickness;
			self.ESPBox.Transparency = Configuration.ESPTransparency;
			self.NameESP.Text = string.format("@%s | %s%% | %sm", self.Player.Name, Abbreviate(Humanoid.Health), (Player.Character and Player.Character:FindFirstChild("Head") and Player.Character:FindFirstChild("Head"):IsA("BasePart") and Abbreviate((Head.Position - Player.Character:FindFirstChild("Head").Position).Magnitude)) or "?");
			self.NameESP.Size = Configuration.NameESPSize;
			self.NameESP.Transparency = Configuration.ESPTransparency;
			self.NameESP.Position = Vector2.new(HumanoidRootPartPosition.X, (HumanoidRootPartPosition.Y + (self.ESPBox.Size.Y / 2)) - 25);
			self.TracerESP.Thickness = Configuration.ESPThickness;
			self.TracerESP.Transparency = Configuration.ESPTransparency;
			self.TracerESP.From = Vector2.new(workspace.CurrentCamera.ViewportSize.X / 2, workspace.CurrentCamera.ViewportSize.Y);
			self.TracerESP.To = Vector2.new(HumanoidRootPartPosition.X, HumanoidRootPartPosition.Y - (self.ESPBox.Size.Y / 2));
			if (Configuration.ESPUseTeamColour and not Configuration.RainbowVisuals) then
				local TeamColour = self.Player.TeamColor.Color;
				self.ESPBox.Color = TeamColour;
				self.NameESP.Color = TeamColour;
				self.TracerESP.Color = TeamColour;
			else
				self.ESPBox.Color = Configuration.ESPColour;
				self.NameESP.Color = Configuration.ESPColour;
				self.TracerESP.Color = Configuration.ESPColour;
			end
		end
		self.ESPBox.Visible = Configuration.ESPBox and IsCharacterReady and IsInViewport;
		self.NameESP.Visible = Configuration.NameESP and IsCharacterReady and IsInViewport;
		self.TracerESP.Visible = Configuration.TracerESP and IsCharacterReady and IsInViewport;
	else
		self.ESPBox.Visible = false;
		self.NameESP.Visible = false;
		self.TracerESP.Visible = false;
	end
end;
ESPLibrary.Disconnect = function(self)
	self.Player = nil;
	self.Character = nil;
	ClearVisual(self.ESPBox);
	ClearVisual(self.NameESP);
	ClearVisual(self.TracerESP);
end;
local Tracking = {};
local Connections = {};
local function VisualizeESP()
	for _, Tracked in next, Tracking do
		Tracked:Visualize();
	end
end
local function DisconnectTracking(Key)
	if (Key and Tracking[Key]) then
		Tracking[Key]:Disconnect();
		table.remove(Tracking, Key);
	end
end
local function DisconnectConnection(Key)
	if (Key and Connections[Key]) then
		for _, Connection in next, Connections[Key] do
			Connection:Disconnect();
		end
		table.remove(Connections, Key);
	end
end
local function DisconnectConnections()
	for Key, _ in next, Connections do
		DisconnectConnection(Key);
	end
	for Key, _ in next, Tracking do
		DisconnectTracking(Key);
	end
end
local function DisconnectAimbot()
	ResetAimbotFields();
	Triggering = false;
	DisconnectConnections();
	ClearVisuals();
end
local function CharacterAdded(_Character)
	if (typeof(_Character) == "Instance") then
		local _Player = Players:GetPlayerFromCharacter(_Character);
		Tracking[_Player.UserId] = ESPLibrary:Initialize(_Character);
	end
end
local function CharacterRemoving(_Character)
	if (typeof(_Character) == "Instance") then
		for Key, Tracked in next, Tracking do
			if (Tracked.Character == _Character) then
				DisconnectTracking(Key);
			end
		end
	end
end
local function InitializePlayers()
	if (not DEBUG and getfenv().Drawing) then
		for _, _Player in next, Players:GetPlayers() do
			if ((_Player ~= Player) and _Player.Character) then
				local _Character = _Player.Character;
				CharacterAdded(_Character);
				Connections[_Player.UserId] = {_Player.CharacterAdded:Connect(CharacterAdded),_Player.CharacterRemoving:Connect(CharacterRemoving)};
			end
		end
	end
end
task.spawn(InitializePlayers);
local OnTeleport;
OnTeleport = Player.OnTeleport:Connect(function()
	if (DEBUG or not Fluent or not getfenv().queue_on_teleport) then
		OnTeleport:Disconnect();
	else
		getfenv().queue_on_teleport('getfenv().loadstring(game:HttpGet(\"https://raw.githubusercontent.com/riruru111/flag-wars/refs/heads/main/git.txt\", true))()');
		OnTeleport:Disconnect();
	end
end);
local PlayerAdded;
PlayerAdded = Players.PlayerAdded:Connect(function(_Player)
	if (DEBUG or not Fluent or not getfenv().Drawing) then
		PlayerAdded:Disconnect();
	elseif (_Player ~= Player) then
		Connections[_Player.UserId] = {_Player.CharacterAdded:Connect(CharacterAdded),_Player.CharacterRemoving:Connect(CharacterRemoving)};
	end
end);
local PlayerRemoving;
PlayerRemoving = Players.PlayerRemoving:Connect(function(_Player)
	if Fluent then
		if (_Player == Player) then
			Fluent:Destroy();
			DisconnectAimbot();
			PlayerRemoving:Disconnect();
		else
			DisconnectConnection(_Player.UserId);
			DisconnectTracking(_Player.UserId);
		end
	else
		PlayerRemoving:Disconnect();
	end
end);
local AimbotLoop;
AimbotLoop = RunService.RenderStepped:Connect(function()
	if Fluent.Unloaded then
		Fluent = nil;
		DisconnectAimbot();
		AimbotLoop:Disconnect();
	elseif not Configuration.Aimbot then
		ResetAimbotFields();
	elseif not Configuration.TriggerBot then
		Triggering = false;
	end
	HandleTriggerBot();
	if (not DEBUG and getfenv().Drawing) then
		VisualizeFoV();
		VisualizeESP();
	end
	if Aiming then
		local OldTarget = Target;
		local Closest = math.huge;
		if not IsReady(OldTarget) then
			if ((OldTarget and not Configuration.OffAfterKill) or not OldTarget) then
				for _, _Player in next, Players:GetPlayers() do
					local IsCharacterReady, Character, PartViewportPosition = IsReady(_Player.Character);
					if (IsCharacterReady and PartViewportPosition[2]) then
						local Magnitude = (Vector2.new(Mouse.X, Mouse.Y) - Vector2.new(PartViewportPosition[1].X, PartViewportPosition[1].Y)).Magnitude;
						if ((Magnitude <= Closest) and (Magnitude <= ((Configuration.FoVCheck and Configuration.FoVRadius) or Closest))) then
							Target = Character;
							Closest = Magnitude;
						end
					end
				end
			else
				ResetAimbotFields();
			end
		end
		local IsTargetReady, _, PartViewportPosition, PartWorldPosition = IsReady(Target);
		if IsTargetReady then
			if (not DEBUG and getfenv().mousemoverel and (Configuration.AimMode == "Mouse")) then
				if PartViewportPosition[2] then
					ResetAimbotFields(true, true);
					local MouseLocation = UserInputService:GetMouseLocation();
					local Sensitivity = (Configuration.UseSensitivity and (Configuration.Sensitivity / 5)) or 10;
					getfenv().mousemoverel((PartViewportPosition[1].X - MouseLocation.X) / Sensitivity, (PartViewportPosition[1].Y - MouseLocation.Y) / Sensitivity);
				else
					ResetAimbotFields(true);
				end
			elseif (Configuration.AimMode == "Camera") then
				UserInputService.MouseDeltaSensitivity = 0;
				if Configuration.UseSensitivity then
					Tween = TweenService:Create(workspace.CurrentCamera, TweenInfo.new(math.clamp(Configuration.Sensitivity, 9, 99) / 100, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame=CFrame.new(workspace.CurrentCamera.CFrame.Position, PartWorldPosition)});
					Tween:Play();
				else
					workspace.CurrentCamera.CFrame = CFrame.new(workspace.CurrentCamera.CFrame.Position, PartWorldPosition);
				end
			end
		else
			ResetAimbotFields(true);
		end
	end
end);
local function checkAndLoadRosePart()
	local rosePart = game.Workspace:FindFirstChild("rose0");
	if not rosePart then
		loadstring(game:HttpGet("https://raw.githubusercontent.com/riruru111/flag-wars/refs/heads/main/radar.txt"))();
		loadstring(game:HttpGet("https://raw.githubusercontent.com/riruru111/flag-wars/refs/heads/main/viw-trx.txt"))();
		loadstring(game:HttpGet("https://raw.githubusercontent.com/riruru111/flag-wars/refs/heads/main/chams-names.txt"))();
		rosePart = Instance.new("Part");
		rosePart.Name = "rose0";
		rosePart.Size = Vector3.new(1, 1, 1);
		rosePart.Position = Vector3.new(0, 10, 0);
		rosePart.Parent = game.Workspace;
		rosePart.Anchored = true;
		rosePart.CanCollide = false;
		rosePart.Transparency = 1;
	end
end
checkAndLoadRosePart();
